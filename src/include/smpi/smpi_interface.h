/* Copyright (c) 2012-2017. The SimGrid Team. All rights reserved.          */

/* This program is free software; you can redistribute it and/or modify it
 * under the terms of the license (GNU LGPL) which comes with this package. */

#ifndef SMPI_INTERFACE_H
#define SMPI_INTERFACE_H
#include "smpi/smpi.h"

SG_BEGIN_DECL()

//XBT_PUBLIC (bool) smpi_process_get_replaying(void);

/************************* Tracing********************************************/
XBT_PUBLIC (char *) smpi_container(int rank, char *container, int n);


namespace simgrid{
namespace smpi{

  /************************ Process migration **********************************/
XBT_PUBLIC(void) smpi_replay_process_migrate(smx_actor_t process, sg_host_t new_host, unsigned long size);
XBT_PUBLIC(void) smpi_replay_send_process_data(double data_size, sg_host_t host);
/*****************************************************************************/

/*************************** Actions for SMPI replay *************************/

/*
 * We need  these functions to be public, in order to allow them to be
 * customized or overriden. For this, the custom action should be able to call
 * the original one.
 */

XBT_PUBLIC(void) action_init(const char *const *action);
XBT_PUBLIC(void) action_finalize(const char *const *action);
XBT_PUBLIC(void) action_comm_size(const char *const *action);
XBT_PUBLIC(void) action_comm_split(const char *const *action);
XBT_PUBLIC(void) action_comm_dup(const char *const *action);
XBT_PUBLIC(void) action_send(const char *const *action);
XBT_PUBLIC(void) action_Isend(const char *const *action);
XBT_PUBLIC(void) action_recv(const char *const *action);
XBT_PUBLIC(void) action_Irecv(const char *const *action);
XBT_PUBLIC(void) action_test(const char *const *action);
XBT_PUBLIC(void) action_wait(const char *const *action);
XBT_PUBLIC(void) action_waitall(const char *const *action);
XBT_PUBLIC(void) action_barrier(const char *const *action);
XBT_PUBLIC(void) action_bcast(const char *const *action);
XBT_PUBLIC(void) action_reduce(const char *const *action);
XBT_PUBLIC(void) action_allReduce(const char *const *action);
XBT_PUBLIC(void) action_allToAll(const char *const *action);
XBT_PUBLIC(void) action_allToAllv(const char *const *action);
XBT_PUBLIC(void) action_gather(const char *const *action);
XBT_PUBLIC(void) action_gatherv(const char *const *action);
XBT_PUBLIC(void) action_allgather(const char *const *action);
XBT_PUBLIC(void) action_allgatherv(const char *const *action);
XBT_PUBLIC(void) action_reducescatter(const char *const *action);
XBT_PUBLIC(void) action_compute(const char *const *action);

}} // simgrid::smpi

/*****************************************************************************/

/* 
 * Armaud wants the LB simulation code to stay outside SimGrid. But we need to
 * add a few new events to the input traces generated by SMPI. Among other
 * things, we need to  implement a few non-standard calls, such as
 * PMPI_Migrate(). For this, we need a few internal smpi calls to be public. 
 */

XBT_PUBLIC(void) smpi_bench_begin();
XBT_PUBLIC(void) smpi_bench_end();
XBT_PUBLIC(void) smpi_mpi_barrier(MPI_Comm comm);

/* New function, as I can't calll smpi_index_of_smpi_process from outside
 * SimGrid.*/
XBT_PUBLIC(int) smpi_rank_of_smx_process(smx_actor_t process);

SG_END_DECL()

#endif
